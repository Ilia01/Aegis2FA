# Docker Compose for Development Environment
# Includes volume mounts for hot-reload and development tools

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: 2fa-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: twofa_dev
      POSTGRES_USER: twofa_user
      POSTGRES_PASSWORD: dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twofa_user -d twofa_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - 2fa-dev-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: 2fa-redis-dev
    restart: unless-stopped
    command: redis-server
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - 2fa-dev-network

  # Backend API Service (Development mode with hot-reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: 2fa-backend-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://twofa_user:dev_password@postgres:5432/twofa_dev?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_ACCESS_SECRET: dev_access_secret_key_change_in_production
      JWT_REFRESH_SECRET: dev_refresh_secret_key_change_in_production
      DEVICE_TOKEN_SECRET: dev_device_secret_key_change_in_production
      CORS_ORIGINS: http://localhost:3000
      # Optional: Add your development credentials
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      EMAIL_FROM: ${EMAIL_FROM:-dev@2fa-service.com}
    ports:
      - "3001:3001"
    volumes:
      # Mount source code for hot-reload
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - ./backend/package.json:/app/package.json
      - ./backend/tsconfig.json:/app/tsconfig.json
      # Don't mount node_modules (use container's version)
      - /app/node_modules
    networks:
      - 2fa-dev-network
    command: npm run dev

  # Frontend Showcase UI (Development mode with hot-reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: 2fa-frontend-dev
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot-reload
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/contexts:/app/contexts
      - ./frontend/lib:/app/lib
      - ./frontend/types:/app/types
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/next.config.ts:/app/next.config.ts
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts
      # Don't mount node_modules or .next (use container's version)
      - /app/node_modules
      - /app/.next
    networks:
      - 2fa-dev-network
    command: npm run dev

volumes:
  postgres_dev_data:
    driver: local

networks:
  2fa-dev-network:
    driver: bridge
